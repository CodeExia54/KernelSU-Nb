# .github/workflows/gki-kernel.yml
# Reusable GKI kernel build workflow with optional in-tree (embedded) module build
# - Supports build_lkm (produce .ko) and build_in_tree (embed into kernel image)
# - Use the caller workflow to pass parameters and choose which artifacts to upload.

name: Inbuild GKI Kernel Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_name:
        required: true
        type: string
      tag:
        required: true
        type: string
      os_patch_level:
        required: false
        type: string
        default: "2022-05"
      module_dir:
        required: false
        type: string
        default: "kernelsu"
      module_name:
        required: false
        type: string
        default: "kernelsu"
      module_config:
        required: false
        type: string
        default: "KSU"
      use_cache:
        required: false
        type: boolean
        default: true
      build_lkm:
        required: false
        type: boolean
        default: false
      build_in_tree:
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build ${{ inputs.version_name }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout module repo (caller should checkout kernel/manifest separately)
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup kernel source (repo sync)
        run: |
          set -euo pipefail
          echo "Free space:"
          df -h
          cd $GITHUB_WORKSPACE
          sudo apt-get update -y
          sudo apt-get install -y repo
          mkdir -p android-kernel && cd android-kernel
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ inputs.tag }})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
            echo "Found deprecated branch: ${{ inputs.tag }}"
            sed -i 's/"${{ inputs.tag }}"/"deprecated\/${{ inputs.tag }}"/g' $DEFAULT_MANIFEST_PATH
            cat $DEFAULT_MANIFEST_PATH
          fi
          repo --version
          repo --trace sync -c -j$(nproc --all) --no-tags
          df -h

      - name: Setup Module (copy into kernel tree & add Kconfig/Makefile entries)
        run: |
          set -euo pipefail
          MODULE_DIR="${{ inputs.module_dir }}"
          MODULE_NAME="${{ inputs.module_name }}"
          MODULE_CONFIG="${{ inputs.module_config }}"
          BUILD_IN_TREE="${{ inputs.build_in_tree }}"
          cd android-kernel
          GKI_ROOT=$(pwd)
          echo "[+] GKI_ROOT: $GKI_ROOT"

          # copy or symlink module sources into kernel tree under common/drivers
          TARGET_DIR="common/drivers/${MODULE_DIR}"
          mkdir -p "$(dirname "$TARGET_DIR")"
          # remove old link if exists and create symlink to module sources present in KernelSU path
          if [ -e "$TARGET_DIR" ] && [ ! -L "$TARGET_DIR" ]; then
            echo "Target $TARGET_DIR exists and is not a symlink. Backing up."
            mv "$TARGET_DIR" "${TARGET_DIR}.bak.$(date +%s)" || true
          fi
          ln -sfn "$GITHUB_WORKSPACE/KernelSU/$MODULE_DIR" "$TARGET_DIR"
          echo "[+] Copied/symlinked $MODULE_DIR -> $TARGET_DIR"

          # Ensure drivers Kconfig includes module's Kconfig
          DRIVER_KCONFIG="common/drivers/Kconfig"
          if ! grep -q "drivers/${MODULE_DIR}/Kconfig" "$DRIVER_KCONFIG"; then
            sed -i "/endmenu/i\\source \"drivers/${MODULE_DIR}/Kconfig\"" "$DRIVER_KCONFIG"
            echo "[+] Inserted drivers/${MODULE_DIR}/Kconfig into $DRIVER_KCONFIG"
          fi

          # Ensure drivers Makefile references config
          DRIVER_MAKEFILE="common/drivers/Makefile"
          if ! grep -q "${MODULE_DIR}/" "$DRIVER_MAKEFILE"; then
            printf "\nobj-\$(CONFIG_${MODULE_CONFIG}) += ${MODULE_DIR}/\n" >> "$DRIVER_MAKEFILE"
            echo "[+] Added obj-\$(CONFIG_${MODULE_CONFIG}) entry to $DRIVER_MAKEFILE"
          fi

          # If not building in-tree, ensure module will be packaged as an external module
          if [ "$BUILD_IN_TREE" = "true" ]; then
            echo "[+] Module will be built in-tree (Image) later."
          else
            # try to set module default to 'm' in module Kconfig to prefer module build
            if [ -f "common/drivers/${MODULE_DIR}/Kconfig" ]; then
              sed -i "/config ${MODULE_CONFIG}/,/help/{s/default y/default m/}" "common/drivers/${MODULE_DIR}/Kconfig" || true
            fi
            echo "drivers/${MODULE_DIR}/${MODULE_NAME}.ko" >> common/android/gki_aarch64_modules || true
            echo "[+] Module will be packaged as LKM (added to gki_aarch64_modules)"
          fi

          # commit changes if any
          cd common
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Add ${MODULE_DIR} to drivers (auto)" || true
          fi
          cd ..

      - name: Setup ccache (optional)
        if: ${{ inputs.use_cache == true }}
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: gki-kernel-aarch64-${{ inputs.version_name }}
          max-size: 2G
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      - name: Setup for LKM (patch build scripts etc)
        if: ${{ inputs.build_lkm == true }}
        working-directory: android-kernel
        run: |
          set -euo pipefail
          MODULE_DIR="${{ inputs.module_dir }}"
          MODULE_NAME="${{ inputs.module_name }}"

          pip install ast-grep-cli || true
          sudo apt-get install -y llvm-15 || true

          # Try to avoid abort on unknown symbols when building LKM
          if [ -e build/build.sh ]; then
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || true
            if [ -e common/modules.bzl ]; then
              sed -i "s/_COMMON_GKI_MODULES_LIST = \[/_COMMON_GKI_MODULES_LIST = \[ \"drivers\/${MODULE_DIR}\/${MODULE_NAME}.ko\",/g" common/modules.bzl || true
            fi
          else
            TARGET_FILE="build/kernel/build.sh"
            if [ ! -e "$TARGET_FILE" ]; then
              TARGET_FILE="build/build.sh"
            fi
            if [ -e "$TARGET_FILE" ]; then
              sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' $TARGET_FILE || true
              sed -i 's/if ! diff -u "\${KERNEL_DIR}\/\${MODULES_ORDER}" "\${OUT_DIR}\/modules\.order"; then/if false; then/g' $TARGET_FILE || true
              sed -i 's@${ROOT_DIR}/build/abi/compare_to_symbol_list@echo@g' $TARGET_FILE || true
            fi
          fi

      - name: Make working directory clean to avoid dirty
        working-directory: android-kernel
        run: |
          set -euo pipefail
          git config --global user.email "bot@lkm.org"
          git config --global user.name "LKMBot"
          cd common || true
          git add -A || true
          if ! git diff --cached --quiet; then
            git commit -m "Add module ${MODULE_DIR} (auto)" || true
          fi
          cd ..

      - name: Build Kernel/LKM (bazel or build script)
        working-directory: android-kernel
        env:
          MAKEFLAGS: -j$(nproc)
        run: |
          set -euo pipefail
          if [ -e build/build.sh ]; then
            # Use clang via ccache if available
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || ( echo "build/build.sh failed"; exit 1 )
          else
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist || ( echo "bazel build failed"; exit 1 )
          fi

      - name: Prepare artifacts (collect image or .ko depending on flags)
        id: prepareArtifacts
        run: |
          set -euo pipefail
          MODULE_NAME="${{ inputs.module_name }}"
          BUILD_LKM="${{ inputs.build_lkm }}"
          BUILD_IN_TREE="${{ inputs.build_in_tree }}"
          # Common possible output dirs
          OUTDIR1="out/${{ inputs.version }}/dist"
          OUTDIR2="dist"
          OUTDIR=""
          if [ -d "$OUTDIR1" ]; then
            OUTDIR="$OUTDIR1"
          elif [ -d "$OUTDIR2" ]; then
            OUTDIR="$OUTDIR2"
          else
            # fallback to top-level dist
            if ls | grep -q dist; then
              OUTDIR="dist"
            else
              echo "No output dir found under android-kernel. Looking for likely paths..."
              OUTDIR=""
            fi
          fi

          mkdir -p ../output

          # Build-in-tree: collect kernel images & prepare AnyKernel
          if [ "$BUILD_IN_TREE" = "true" ]; then
            echo "[+] Collecting image artifacts (in-tree build)"
            # Common kernel image locations
            if [ -n "$OUTDIR" ] && [ -e "$OUTDIR/Image" ]; then
              cp "$OUTDIR/Image" ../output/ || true
            elif [ -e "Image" ]; then
              cp Image ../output/ || true
            fi
            # Image.lz4 or Image.gz
            if [ -n "$OUTDIR" ] && [ -e "$OUTDIR/Image.lz4" ]; then
              cp "$OUTDIR/Image.lz4" ../output/ || true
            fi
            # vmlinux
            if [ -n "$OUTDIR" ] && [ -e "$OUTDIR/vmlinux" ]; then
              cp "$OUTDIR/vmlinux" ../output/ || true
            elif [ -e "vmlinux" ]; then
              cp vmlinux ../output/ || true
            fi

            # Prepare AnyKernel package (optional)
            git clone https://github.com/Kernel-SU/AnyKernel3 anykernel3 || true
            rm -rf anykernel3/.git || true
            if [ -e "$OUTDIR/Image" ]; then
              cp "$OUTDIR/Image" anykernel3/ || true
            elif [ -e "Image" ]; then
              cp Image anykernel3/ || true
            fi
            # Copy AnyKernel into output for upload
            if [ -d anykernel3 ]; then
              cp -r anykernel3 ../output/AnyKernel3 || true
            fi
          fi

          # LKM path: copy module .ko artifact (strip it)
          if [ "$BUILD_LKM" = "true" ]; then
            echo "[+] Collecting LKM artifacts"
            # Locate .ko in output directory
            if [ -n "$OUTDIR" ] && [ -e "$OUTDIR/${MODULE_NAME}.ko" ]; then
              # strip if llvm-strip available
              if command -v llvm-strip-15 >/dev/null 2>&1; then
                llvm-strip-15 -d "$OUTDIR/${MODULE_NAME}.ko" || true
              fi
              mv "$OUTDIR/${MODULE_NAME}.ko" ../output/${{ inputs.version }}_${MODULE_NAME}.ko || true
            else
              # try dist path
              if [ -e "dist/${MODULE_NAME}.ko" ]; then
                if command -v llvm-strip-15 >/dev/null 2>&1; then
                  llvm-strip-15 -d "dist/${MODULE_NAME}.ko" || true
                fi
                mv "dist/${MODULE_NAME}.ko" ../output/${{ inputs.version }}_${MODULE_NAME}.ko || true
              else
                echo "Warning: .ko not found. Searched $OUTDIR and dist/"
              fi
            fi
          fi

          echo "Output files:"
          ls -la ../output || true

      - name: Upload kernel image artifacts
        if: ${{ inputs.build_in_tree == true }}
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: android-kernel/../output/*

      - name: Upload AnyKernel3
        if: ${{ inputs.build_in_tree == true }}
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: android-kernel/../output/AnyKernel3/**

      - name: Upload LKM
        if: ${{ inputs.build_lkm == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.version }}-${{ inputs.module_name }}
          path: android-kernel/../output/*_${{ inputs.module_name }}.ko
