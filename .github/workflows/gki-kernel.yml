name: In-tree GKI Kernel Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_name:
        required: true
        type: string
      tag:
        required: true
        type: string
      os_patch_level:
        required: false
        type: string
        default: "2022-05"
      module_dir:
        required: false
        type: string
        default: "kernelsu"
      module_name:
        required: false
        type: string
        default: ""
      module_config:
        required: false
        type: string
        default: "PVM_MOD"

jobs:
  build:
    name: Build ${{ inputs.version_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Clean workspace
        run: |
          sudo rm -rf android-kernel output bootimgs AnyKernel3 $CONFIG
          mkdir -p output bootimgs

      - name: Checkout module repo
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Set CONFIG environment variable
        run: |
          CONFIG="${{ inputs.version_name }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 git curl repo

      - name: Clone AnyKernel3
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git
          rm -rf AnyKernel3/.git

      - name: Initialize and sync kernel source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          repo init --depth=1 -u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ inputs.tag }})
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
            sed -i "s/\"${{ inputs.tag }}\"/\"deprecated\/${{ inputs.tag }}\"/g" .repo/manifests/default.xml
          fi
          repo sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Clean kernel build directories
        run: |
          cd "$CONFIG"
          rm -rf out build-out dist
          make -C common clean 2>/dev/null || true
          make -C common mrproper 2>/dev/null || true

      - name: Setup Module (embed into kernel tree)
        run: |
          cd "$CONFIG"
          MODULE_DIR="${{ inputs.module_dir }}"
          MODULE_CONFIG="${{ inputs.module_config }}"
          
          rm -rf "common/drivers/${MODULE_DIR}"
          ln -sfn "$GITHUB_WORKSPACE/KernelSU/$MODULE_DIR" "common/drivers/${MODULE_DIR}"
          
          sed -i "/source \"drivers\/${MODULE_DIR}\/Kconfig\"/d" "common/drivers/Kconfig"
          sed -i "/endmenu/i\\source \"drivers/${MODULE_DIR}/Kconfig\"" "common/drivers/Kconfig"
          
          sed -i "/${MODULE_DIR}\//d" "common/drivers/Makefile"
          echo "obj-\$(CONFIG_${MODULE_CONFIG}) += ${MODULE_DIR}/" >> "common/drivers/Makefile"

      - name: Enable module in kernel config
        run: |
          cd "$CONFIG"
          echo "CONFIG_${{ inputs.module_config }}=y" >> "common/arch/arm64/configs/gki_defconfig"

      - name: Remove dirty marks (EXACTLY like clean workflow)
        run: |
          cd "$CONFIG"
          
          # 1. Set controlled timestamp
          CURRENT_TIME=$(date -u +"%a %b %d %H:%M:%S UTC %Y")
          echo "CURRENT_TIME=$CURRENT_TIME"
          
          # 2. Fix UTS_VERSION in mkcompile_h
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_TIME\"}" ./common/scripts/mkcompile_h

          # 3. Remove -dirty from setlocalversion
          sed -i 's/-dirty//' ./common/scripts/setlocalversion

          # 4. Fix Makefile timestamp for 6.1/6.6 kernels
          KERNEL_VERSION=$(echo "${{ inputs.tag }}" | grep -oE '[0-9]+\.[0-9]+' | head -1)
          if [ "$KERNEL_VERSION" = "6.1" ] || [ "$KERNEL_VERSION" = "6.6" ]; then
            sed -i -e "s|\$(preempt-flag-y) \"\$(build-timestamp)\"|\$(preempt-flag-y) \"$CURRENT_TIME\"|" ./common/init/Makefile
          fi
          
          # 5. Bazel-specific cleanups
          if [ ! -f "build/build.sh" ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel
            rm -rf ./common/android/abi_gki_protected_exports_*
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi

          # 6. Set custom version if provided (like clean workflow)
          if [ ! -z "${{ inputs.version }}" ]; then
            sed -i '$s|echo "$res"|echo "${{ inputs.version }}"|' ./common/scripts/setlocalversion
          fi

      - name: Build kernel
        run: |
          cd "$CONFIG"
          # Apply build config cleanups
          sed -i 's/BUILD_SYSTEM_DLKM=1/BUILD_SYSTEM_DLKM=0/' common/build.config.gki.aarch64
          sed -i '/MODULES_ORDER=android\/gki_aarch64_modules/d' common/build.config.gki.aarch64
          sed -i '/KMI_SYMBOL_LIST_STRICT_MODE/d' common/build.config.gki.aarch64

          if [ -f "build/build.sh" ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
          else
            tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist
          fi

      - name: Prepare artifacts
        run: |
          if [ -d "$CONFIG/out/${{ inputs.version }}/dist" ]; then
            OUTDIR="$CONFIG/out/${{ inputs.version }}/dist"
          elif [ -d "$CONFIG/dist" ]; then
            OUTDIR="$CONFIG/dist" 
          elif [ -d "$CONFIG/bazel-bin/common/kernel_aarch64" ]; then
            OUTDIR="$CONFIG/bazel-bin/common/kernel_aarch64"
          else
            echo "ERROR: Could not find kernel output"
            exit 1
          fi

          cp "$OUTDIR"/Image* ./ 2>/dev/null || true
          cp "$OUTDIR"/Image* ./AnyKernel3/ 2>/dev/null || true

      - name: Create AnyKernel3 zip
        run: |
          cd AnyKernel3
          zip -r "../output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-AnyKernel3.zip" ./*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: output/*
