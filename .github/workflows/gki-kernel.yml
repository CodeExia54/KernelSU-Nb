# .github/workflows/gki-kernel.yml
name: GKI Kernel Build (in-tree safe)

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_name:
        required: true
        type: string
      tag:
        required: true
        type: string
      os_patch_level:
        required: false
        type: string
        default: "2022-05"
      module_dir:
        required: false
        type: string
        default: "kernelsu"
      module_name:
        required: false
        type: string
        default: ""
      module_config:
        required: false
        type: string
        default: "PVM_MOD"
      use_cache:
        required: false
        type: boolean
        default: true
      build_lkm:
        required: false
        type: boolean
        default: false
      build_in_tree:
        required: false
        type: boolean
        default: true

jobs:
  build:
    name: Build ${{ inputs.version_name }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout module repo
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup kernel source (repo sync)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y repo
          mkdir -p android-kernel && cd android-kernel
          repo init --depth=1 -u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ inputs.tag }})
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
            sed -i 's/"${{ inputs.tag }}"/"deprecated\/${{ inputs.tag }}"/g' .repo/manifests/default.xml
          fi
          repo sync -c -j$(nproc --all) --no-tags

      - name: Setup Module (install sources into kernel tree)
        env:
          MODULE_DIR: ${{ inputs.module_dir }}
          MODULE_NAME_IN: ${{ inputs.module_name }}
          MODULE_CONFIG: ${{ inputs.module_config }}
          BUILD_LKM: ${{ inputs.build_lkm }}
          BUILD_IN_TREE: ${{ inputs.build_in_tree }}
        run: |
          set -euo pipefail

          # default module name to module_dir if empty
          MODULE_NAME="${MODULE_NAME_IN}"
          if [ -z "$MODULE_NAME" ]; then
            MODULE_NAME="${MODULE_DIR}"
          fi

          echo "[setup] MODULE_DIR=${MODULE_DIR} MODULE_NAME=${MODULE_NAME} MODULE_CONFIG=${MODULE_CONFIG} BUILD_LKM=${BUILD_LKM} BUILD_IN_TREE=${BUILD_IN_TREE}"

          cd android-kernel

          TARGET_DIR="common/drivers/${MODULE_DIR}"
          mkdir -p "$(dirname "$TARGET_DIR")"

          if [ ! -e "$GITHUB_WORKSPACE/KernelSU/${MODULE_DIR}" ]; then
            echo "ERROR: module source not found at $GITHUB_WORKSPACE/KernelSU/${MODULE_DIR}"
            exit 1
          fi

          # symlink module source into kernel tree
          ln -sfn "$GITHUB_WORKSPACE/KernelSU/${MODULE_DIR}" "$TARGET_DIR"
          echo "[setup] linked $GITHUB_WORKSPACE/KernelSU/${MODULE_DIR} -> $TARGET_DIR"

          # ensure Kconfig is included
          DRIVER_KCONFIG="common/drivers/Kconfig"
          if ! grep -q "drivers/${MODULE_DIR}/Kconfig" "$DRIVER_KCONFIG"; then
            sed -i "/endmenu/i\\source \"drivers/${MODULE_DIR}/Kconfig\"" "$DRIVER_KCONFIG"
            echo "[setup] inserted drivers/${MODULE_DIR}/Kconfig into $DRIVER_KCONFIG"
          fi

          # ensure drivers Makefile entry exists (obj-$(CONFIG_X) += dir/)
          DRIVER_MAKEFILE="common/drivers/Makefile"
          if ! grep -q "${MODULE_DIR}/" "$DRIVER_MAKEFILE"; then
            printf "\nobj-\$(CONFIG_${MODULE_CONFIG}) += ${MODULE_DIR}/\n" >> "$DRIVER_MAKEFILE"
            echo "[setup] added obj-\$(CONFIG_${MODULE_CONFIG}) entry to $DRIVER_MAKEFILE"
          fi

          # If building in-tree, ensure we DO NOT add packaging entries for .ko
          if [ "${BUILD_IN_TREE}" = "true" ]; then
            echo "[setup] building in-tree: ensure no .ko packaging entries remain for this driver"
            # remove any existing line for this module from gki_aarch64_modules (idempotent)
            if [ -f common/android/gki_aarch64_modules ]; then
              grep -v "drivers/${MODULE_DIR}/${MODULE_NAME}.ko" common/android/gki_aarch64_modules > common/android/gki_aarch64_modules.tmp || true
              mv common/android/gki_aarch64_modules.tmp common/android/gki_aarch64_modules || true
            fi
          else
            # Only when LKM requested, append packaging entry (guarded to avoid duplicates)
            if ! grep -q "drivers/${MODULE_DIR}/${MODULE_NAME}.ko" common/android/gki_aarch64_modules 2>/dev/null; then
              echo "drivers/${MODULE_DIR}/${MODULE_NAME}.ko" >> common/android/gki_aarch64_modules || true
              echo "[setup] added module packaging entry to common/android/gki_aarch64_modules"
            fi
          fi

      - name: Ensure config set correctly for in-tree build
        if: ${{ inputs.build_in_tree == true }}
        working-directory: android-kernel
        run: |
          set -euo pipefail
          MODULE_CONFIG="${{ inputs.module_config }}"
          # use scripts/config to enable config=y so driver is built-in
          if [ -x scripts/config ]; then
            echo "[cfg] enabling ${MODULE_CONFIG} (built-in)"
            scripts/config --enable "${MODULE_CONFIG}" || true
            # ensure default is applied to .config
            yes '' | make oldconfig >/dev/null 2>&1 || true
          else
            echo "Warning: scripts/config not found; cannot auto-enable ${MODULE_CONFIG}"
          fi

      - name: Setup ccache
        if: ${{ inputs.use_cache == true }}
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: gki-kernel-aarch64-${{ inputs.version_name }}
          max-size: 2G

      - name: Build full kernel (Image + vmlinux)
        working-directory: android-kernel
        run: |
          set -euo pipefail
          # ensure required toolchain/tools exist (install clang if not present)
          sudo apt-get update -y
          sudo apt-get install -y clang llvm || true

          if [ -e build/build.sh ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel run --disk_cache=$HOME/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          fi

      - name: Verify module build mode and produced artifacts
        working-directory: android-kernel
        env:
          MODULE_DIR: ${{ inputs.module_dir }}
          MODULE_NAME_IN: ${{ inputs.module_name }}
        run: |
          set -euo pipefail
          MODULE_NAME="${MODULE_NAME_IN}"
          if [ -z "${MODULE_NAME}" ]; then MODULE_NAME="${MODULE_DIR}"; fi

          echo "[verify] checking whether kernel built module or built-in"
          # look for .ko in typical output locations
          if find out -path "*/common/${MODULE_NAME}.ko" -print -quit | grep -q .; then
            echo "Warning: .ko found in out - module was built as .ko"
            find out -name "${MODULE_NAME}.ko" -print || true
          else
            echo "[verify] No .ko found for ${MODULE_NAME} in out/"
          fi

          # display module symbol inclusion (autoksyms)
          if [ -f include/generated/autoksyms.h ]; then
            tail -n 50 include/generated/autoksyms.h || true
          fi

          # list produced kernel images
          ls -la arch/arm64/boot || true
          ls -la out || true

      - name: Prepare artifacts (Image / vmlinux / AnyKernel3)
        working-directory: android-kernel
        run: |
          set -euo pipefail
          OUTDIR="out/${{ inputs.version }}/dist"
          if [ ! -d "$OUTDIR" ]; then
            OUTDIR="dist"
          fi
          mkdir -p ../output

          # copy image(s)
          if [ -e "$OUTDIR/Image" ]; then cp "$OUTDIR/Image" ../output/ || true; fi
          if [ -e "$OUTDIR/Image.lz4" ]; then cp "$OUTDIR/Image.lz4" ../output/ || true; fi
          if [ -e "$OUTDIR/vmlinux" ]; then cp "$OUTDIR/vmlinux" ../output/ || true; fi
          if [ -e "arch/arm64/boot/Image" ]; then cp arch/arm64/boot/Image ../output/ || true; fi
          if [ -e "arch/arm64/boot/Image.lz4" ]; then cp arch/arm64/boot/Image.lz4 ../output/ || true; fi

          # AnyKernel packaging (optional)
          git clone https://github.com/Kernel-SU/AnyKernel3 anykernel3 || true
          rm -rf anykernel3/.git || true
          if [ -e "$OUTDIR/Image" ]; then cp "$OUTDIR/Image" anykernel3/ || true; elif [ -e "arch/arm64/boot/Image" ]; then cp arch/arm64/boot/Image anykernel3/ || true; fi
          if [ -d anykernel3 ]; then mv anykernel3 ../output/AnyKernel3 || true; fi

          echo "[artifacts] output contents:"
          ls -la ../output || true

      - name: Upload kernel images
        if: ${{ inputs.build_in_tree == true }}
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: android-kernel/../output/*

      - name: Upload AnyKernel3
        if: ${{ inputs.build_in_tree == true }}
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: android-kernel/../output/AnyKernel3/**
