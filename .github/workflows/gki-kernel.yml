name: Inbuild GKI Kernel Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_name:
        required: true
        type: string
      tag:
        required: true
        type: string
      os_patch_level:
        required: false
        type: string
        default: "2022-05"
      module_dir:
        required: false
        type: string
        default: "kernelsu"
      module_name:
        required: false
        type: string
        default: "kernelsu"
      module_config:
        required: false
        type: string
        default: "KSU"
      use_cache:
        required: false
        type: boolean
        default: true
      build_lkm:
        required: false
        type: boolean
        default: false
      build_in_tree:
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build ${{ inputs.version_name }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout module repo (caller should checkout kernel/manifest separately)
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup kernel source (repo sync)
        run: |
          set -euo pipefail
          echo "Free space:"
          df -h
          cd $GITHUB_WORKSPACE
          sudo apt-get update -y
          sudo apt-get install -y repo
          mkdir -p android-kernel && cd android-kernel
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ inputs.tag }})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
            echo "Found deprecated branch: ${{ inputs.tag }}"
            sed -i 's/"${{ inputs.tag }}"/"deprecated\/${{ inputs.tag }}"/g' $DEFAULT_MANIFEST_PATH
            cat $DEFAULT_MANIFEST_PATH
          fi
          repo --version
          repo --trace sync -c -j$(nproc --all) --no-tags
          df -h

      - name: Setup Module (copy into kernel tree & add Kconfig/Makefile entries)
        run: |
          set -euo pipefail
          MODULE_DIR="${{ inputs.module_dir }}"
          MODULE_NAME="${{ inputs.module_name }}"
          MODULE_CONFIG="${{ inputs.module_config }}"
          BUILD_IN_TREE="${{ inputs.build_in_tree }}"
          cd android-kernel
          GKI_ROOT=$(pwd)
          echo "[+] GKI_ROOT: $GKI_ROOT"

          # copy/symlink module sources into kernel tree
          TARGET_DIR="common/drivers/${MODULE_DIR}"
          mkdir -p "$(dirname "$TARGET_DIR")"
          rm -rf "$TARGET_DIR"
          ln -sfn "$GITHUB_WORKSPACE/KernelSU/$MODULE_DIR" "$TARGET_DIR"
          echo "[+] Linked $MODULE_DIR -> $TARGET_DIR"

          # Ensure drivers Kconfig includes module's Kconfig
          DRIVER_KCONFIG="common/drivers/Kconfig"
          if ! grep -q "drivers/${MODULE_DIR}/Kconfig" "$DRIVER_KCONFIG"; then
            sed -i "/endmenu/i\\source \"drivers/${MODULE_DIR}/Kconfig\"" "$DRIVER_KCONFIG"
          fi

          # Ensure drivers Makefile references config
          DRIVER_MAKEFILE="common/drivers/Makefile"
          if ! grep -q "${MODULE_DIR}/" "$DRIVER_MAKEFILE"; then
            printf "\nobj-\$(CONFIG_${MODULE_CONFIG}) += ${MODULE_DIR}/\n" >> "$DRIVER_MAKEFILE"
          fi

          if [ "$BUILD_IN_TREE" = "true" ]; then
            echo "[+] Module set for built-in build"
          else
            if [ -f "common/drivers/${MODULE_DIR}/Kconfig" ]; then
              sed -i "/config ${MODULE_CONFIG}/,/help/{s/default y/default m/}" "common/drivers/${MODULE_DIR}/Kconfig" || true
            fi
            echo "drivers/${MODULE_DIR}/${MODULE_NAME}.ko" >> common/android/gki_aarch64_modules || true
          fi

          cd common
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Add ${MODULE_DIR} to drivers (auto)" || true
          fi
          cd ..

      - name: Setup ccache
        if: ${{ inputs.use_cache == true }}
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: gki-kernel-aarch64-${{ inputs.version_name }}
          max-size: 2G
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      - name: Build Kernel/LKM (bazel or build script)
        working-directory: android-kernel
        env:
          MAKEFLAGS: -j$(nproc)
        run: |
          set -euo pipefail
          if [ -e build/build.sh ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          fi

      - name: Prepare artifacts (Image / vmlinux / AnyKernel3)
        working-directory: android-kernel
        run: |
          set -euo pipefail
          OUTDIR="out/${{ inputs.version }}/dist"
          if [ ! -d "$OUTDIR" ]; then
            OUTDIR="dist"
          fi
          mkdir -p "$GITHUB_WORKSPACE/output"

          # copy kernel images
          if [ -e "$OUTDIR/Image" ]; then cp "$OUTDIR/Image" "$GITHUB_WORKSPACE/output/" || true; fi
          if [ -e "$OUTDIR/Image.lz4" ]; then cp "$OUTDIR/Image.lz4" "$GITHUB_WORKSPACE/output/" || true; fi
          if [ -e "$OUTDIR/vmlinux" ]; then cp "$OUTDIR/vmlinux" "$GITHUB_WORKSPACE/output/" || true; fi
          if [ -e "arch/arm64/boot/Image" ]; then cp arch/arm64/boot/Image "$GITHUB_WORKSPACE/output/" || true; fi
          if [ -e "arch/arm64/boot/Image.lz4" ]; then cp arch/arm64/boot/Image.lz4 "$GITHUB_WORKSPACE/output/" || true; fi

          # AnyKernel3 packaging
          rm -rf "$GITHUB_WORKSPACE/output/AnyKernel3" || true
          git clone https://github.com/Kernel-SU/AnyKernel3 "$GITHUB_WORKSPACE/output/AnyKernel3" || true
          rm -rf "$GITHUB_WORKSPACE/output/AnyKernel3/.git" || true
          if [ -e "$OUTDIR/Image" ]; then
            cp "$OUTDIR/Image" "$GITHUB_WORKSPACE/output/AnyKernel3/" || true
          elif [ -e "arch/arm64/boot/Image" ]; then
            cp arch/arm64/boot/Image "$GITHUB_WORKSPACE/output/AnyKernel3/" || true
          fi
          cd "$GITHUB_WORKSPACE/output"
          if [ -d "AnyKernel3" ]; then
            zip -r AnyKernel3.zip AnyKernel3 || true
          fi
          echo "[artifacts] output contents:"
          ls -la "$GITHUB_WORKSPACE/output" || true

      - name: Upload kernel images
        if: ${{ inputs.build_in_tree == true }}
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: output/*

      - name: Upload AnyKernel3
        if: ${{ inputs.build_in_tree == true }}
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: output/AnyKernel3/**,output/AnyKernel3.zip

      - name: Upload LKM
        if: ${{ inputs.build_lkm == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.version }}-${{ inputs.module_name }}
          path: output/*_${{ inputs.module_name }}.ko
